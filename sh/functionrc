#
# Functions for wrapping up find(1)
#
fe() {
	find . -iname $1 | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\)
}

f() {
	find . -iname \*$1\* | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\)
}

fjf() {
	find . -iname \*$1\*.java | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\)
}

fex() {
	find . | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\) | xargs grep $1
}

fx() {
	find . | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\) | xargs grep -i $1
}

fexj() {
	find . -name \*.java | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\) | xargs grep $1
}

fj() {
	find . -name \*.java | grep -v \\(\\.svn\\|\\.sw[a-z]\\|\\.git\\) | xargs grep -i $1
}


track_lengths() {
	for x in *.flac; do 
		metaflac --show-total-samples --show-sample-rate $x |\
			tr '\n' ' ' |\
			awk '{print $1/$2}' |\
			awk '{printf int($1/60) ":%02.0f\n", $1%60 }'
	done
}

# run git status or svn status as apropriate
scm_st() {
	dir=`pwd`
	cmd='echo "Could not find SCM repository"'
	until test -z $dir; do
		if test -d ${dir}/.svn; then
			cmd="svn status"
			break
		fi
		if test -d ${dir}/.git; then
			cmd="git status"
			break
		fi
		dir=${dir%/*}
	done
	eval $cmd
}

# Local functions
if [[ -r ~/.local/functionrc ]]; then
    . ~/.local/functionrc
fi

git_svn_version() {
	if [[ -d .svn ]]; then
		echo `command svnversion`
	else
		base=`git svn info | grep "Last Changed Rev" | awk '{print $4}'`
		mod=`(git st | grep "modified:\|added:\|deleted:" -q) && echo "M"`
		echo $base$mod
	fi
}

build() {
	dir=`pwd`
	cmd='echo "Could not find buildfile"'
	until test -z $dir; do
		if test -f ${dir}/build.gradle; then
			cmd="gradle -b ${dir}/build.gradle -p ${dir} $GRADLE_ARGS $@"
			break
		fi
		if test -f ${dir}/settings.gradle; then
			cmd="gradle -c ${dir}/settings.gradle -p ${dir} $GRADLE_ARGS $@"
			break
		fi
		if test -f ${dir}/build.xml; then
			cmd="ant -f ${dir}/build.xml $ANT_ARGS $@"
			break
		fi
		if test -f ${dir}/pom.xml; then
			cmd="mvn -f ${dir}/pom.xml $MAVEN_ARGS $@"
			break
		fi
		dir=${dir%/*}
	done
	eval $cmd
}

b() {
	build $@
}
cl() {
    target=''
    if [[ $# -gt 0 ]]; then
        target=$1
        shift
    fi
    build clean $@
	build $target $@
}
bc() {
    build compile
}
bi() {
    build install $@
}
cli() {
    cl install $@
}

scrub() {
	vim -o note:todo -c "vsplit note:`date +%Y-%m-%d`"
}
todo() {
	vim note:`date +%Y-%m-%d`
}

is_highres() {
	return 0
}

if [[ -r ~/.local/sh/functionrc ]]; then
	. ~/.local/sh/functionrc
fi
# vim: set ft=zsh:
